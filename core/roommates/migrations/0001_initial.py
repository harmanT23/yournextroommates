# Generated by Django 3.2.6 on 2021-09-25 05:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import profanity.validators
import roommates.managers.user_managers
import roommates.utilities.image_utilities
import roommates.utilities.listing_utilities
import roommates.validators.listing_validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='User ID is a uuid.', primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='First name of user.', max_length=150, validators=[profanity.validators.validate_is_profane], verbose_name='First Name')),
                ('last_name', models.CharField(help_text='Last name of user.', max_length=150, validators=[profanity.validators.validate_is_profane], verbose_name='Last Name')),
                ('email', models.EmailField(help_text='Email of user. Must be unique.', max_length=254, unique=True, verbose_name='Email')),
                ('profile_picture', models.ImageField(blank=True, default='images/users/profile/default.jpeg', help_text='Profile picture of user. If none choses default displayed.', null=True, upload_to=roommates.utilities.image_utilities.upload_user_profile_image, verbose_name='Image')),
                ('date_of_birth', models.DateField(help_text='Date of birth of user. Must be 18 years old or older', verbose_name='Date Of Birth')),
                ('about_me', models.CharField(help_text='Short description about the user.', max_length=500, validators=[profanity.validators.validate_is_profane], verbose_name='About Me')),
                ('university', models.CharField(blank=True, help_text='University that user goes to. Can be empty.', max_length=80, null=True, verbose_name='University')),
                ('university_major', models.CharField(blank=True, help_text='University major of user. Can be empty.', max_length=50, null=True, validators=[profanity.validators.validate_is_profane], verbose_name='University Major')),
                ('profession', models.CharField(blank=True, help_text='Profession of user. Can be empty.', max_length=80, null=True, validators=[profanity.validators.validate_is_profane], verbose_name='Profession')),
                ('city', models.CharField(help_text='Canadian city the user currently resides.', max_length=32, verbose_name='City')),
                ('province', models.CharField(help_text='Canadian province the user currently resides.', max_length=25, verbose_name='Province')),
                ('is_lister', models.BooleanField(blank=True, default=False, help_text='Specifies if user has a listing. Set when listing created.', null=True, verbose_name='Is Lister')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='Indicates when user instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Indicates when user instance was last updated.', verbose_name='Updated At')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', roommates.managers.user_managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=uuid.uuid4, help_text='Name of gallery is its UUID. Generated on instance creation.', max_length=36, unique=True, verbose_name='UUID')),
                ('is_listing_or_user_gallery', models.BooleanField(help_text='Gallery belongs to Listing if true, else for User', verbose_name='Is Listing Gallery')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='Indicates when gallery instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Indicates when gallery instance was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Gallery',
                'verbose_name_plural': 'Galleries',
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Listing ID is a uuid.', primary_key=True, serialize=False, verbose_name='ID')),
                ('listing_title', models.CharField(help_text='Title of the rental listing.', max_length=70, validators=[profanity.validators.validate_is_profane], verbose_name='Listing Title')),
                ('slug', models.SlugField(help_text='Slug to generate a unique url for the listing.', max_length=250, unique=True, verbose_name='Slug')),
                ('room_desc', models.CharField(help_text='A description of the room being listed.', max_length=1024, validators=[profanity.validators.validate_is_profane], verbose_name='Room Description')),
                ('room_type', models.CharField(choices=[('Unknown', 'Unknown'), ('Bedroom', 'Bedroom'), ('Shared Bedroom', 'Shared Bedroom'), ('Den', 'Den'), ('Living Room', 'Living Room'), ('Shared Living Room', 'Shared Living Room'), ('Sunroom', 'Sunroom'), ('Closet', 'Closet')], default='Unknown', help_text='Specifies room type from set of room choices.', max_length=18, verbose_name='Room Type')),
                ('is_furnished', models.BooleanField(help_text='Indicates whether listed room is furnished.', verbose_name='Is Furnished')),
                ('is_air_conditioned', models.BooleanField(help_text='Indicates whether listed room has air conditioning.', verbose_name='Is Air Conditioned')),
                ('is_laundry_ensuite', models.BooleanField(help_text='Indicates whether listed room has ensuite laundry.', verbose_name='Is Laundry Ensuite')),
                ('number_of_bathrooms', models.PositiveIntegerField(help_text='Indicates number of bathrooms for rental property.', validators=[roommates.validators.listing_validators.validate_number_bathrooms], verbose_name='Number Of Bathrooms')),
                ('number_of_residents', models.PositiveIntegerField(help_text='Indicates number of current tenants in rental property.', validators=[roommates.validators.listing_validators.validate_number_residents], verbose_name='Number Of Residents')),
                ('rent_per_month', models.DecimalField(decimal_places=2, help_text='Rent per month between $0.00 to $9,999.99.', max_digits=6, validators=[roommates.validators.listing_validators.validate_prices], verbose_name='Rent Per Month')),
                ('extra_expenses_per_month', models.DecimalField(decimal_places=2, help_text='Extra expenses per month between $0.00 to $999.99.', max_digits=5, validators=[roommates.validators.listing_validators.validate_prices], verbose_name='Extra Expenses Per Month')),
                ('length_of_lease', models.PositiveIntegerField(help_text='Specifies length of lease between 1 to 24 months.', validators=[roommates.validators.listing_validators.validate_lease_length], verbose_name='Length of Lease')),
                ('address1', models.CharField(help_text='Address of rental property without unit/apt/floor number.', max_length=1024, verbose_name='Address 1')),
                ('address2', models.CharField(blank=True, help_text='Unit/apt/floor number of rental property.', max_length=10, null=True, verbose_name='Address 2')),
                ('postal_code', models.CharField(help_text='Canadian postal code of rental property.', max_length=6, validators=[django.core.validators.RegexValidator(message='Enter a postal code in the following format XXX XXX', regex='^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]‚óè?[0-9][A-Z][0-9]$')], verbose_name='Postal Code')),
                ('city', models.CharField(help_text='Canadian city of rental property.', max_length=32, verbose_name='City')),
                ('province', models.CharField(help_text='Canadian province of rental property.', max_length=25, verbose_name='Province')),
                ('earliest_move_in_date', models.DateField(help_text='Specifies earlist move in date for rental property.', verbose_name='Earliest Move In Date')),
                ('listing_expiry_date', models.DateField(default=roommates.utilities.listing_utilities.default_expiry_date, help_text='Specifies expiry date of listing. Default 30 days from lisitng.', verbose_name='Listing Expiry Date')),
                ('listing_visits', models.PositiveIntegerField(default=0, help_text='Specifies number of visits for this listing.', verbose_name='Listing Visits')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='Indicates when listing instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Indicates when listing instance was last updated.', verbose_name='Updated At')),
                ('poster', models.OneToOneField(help_text='The associated user the listing belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Listing',
                'verbose_name_plural': 'Listings',
            },
        ),
        migrations.CreateModel(
            name='GalleryImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Gallery Image ID is a uuid.', primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Image file within the associated gallery', upload_to=roommates.utilities.image_utilities.upload_gallery_image, verbose_name='Image')),
                ('image_name', models.CharField(blank=True, help_text='Name of image', max_length=36, null=True, unique=True, verbose_name='Path')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='Indicates when image instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Indicates when image instance was last updated.', verbose_name='Updated At')),
                ('gallery', models.ForeignKey(help_text='Image belongs to associated Gallery.', on_delete=django.db.models.deletion.CASCADE, to='roommates.gallery', verbose_name='Gallery')),
            ],
            options={
                'verbose_name': 'Gallery Image',
                'verbose_name_plural': 'Gallery Images',
            },
        ),
        migrations.AddField(
            model_name='gallery',
            name='listing',
            field=models.ForeignKey(blank=True, help_text='Gallery belongs to associated listing.', null=True, on_delete=django.db.models.deletion.CASCADE, to='roommates.listing', verbose_name='Listing'),
        ),
        migrations.AddField(
            model_name='gallery',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Gallery belongs to associated user.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
    ]
